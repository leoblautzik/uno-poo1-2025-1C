Clase CuentaBancaria
Crear una clase que represente una cuenta bancaria con los atributos privados:

__titular (nombre del due√±o)

__saldo (saldo inicial)

M√©todos p√∫blicos:

depositar(monto) ‚Üí aumenta el saldo

retirar(monto) ‚Üí disminuye el saldo solo si hay fondos suficientes

mostrar_saldo() ‚Üí devuelve el saldo actual

Validar que el saldo nunca sea negativo desde afuera.

2Ô∏è‚É£ Clase Empleado
Atributos privados:

__nombre

__salario

M√©todos p√∫blicos:

get_nombre() y get_salario()

set_salario(nuevo_salario) ‚Üí solo acepta valores positivos

Bonus: agregar un m√©todo aumentar_salario(porcentaje) que modifique el salario de forma segura.

3Ô∏è‚É£ Clase Rectangulo
Atributos privados:

__ancho

__alto

M√©todos p√∫blicos:

area() ‚Üí devuelve el √°rea

perimetro() ‚Üí devuelve el per√≠metro

set_ancho(nuevo_ancho) y set_alto(nuevo_alto) ‚Üí solo valores positivos

Evitar que desde afuera se pueda asignar valores inv√°lidos directamente.

4Ô∏è‚É£ Clase Alumno
Atributos privados:

__nombre

__notas (lista de n√∫meros)

M√©todos p√∫blicos:

agregar_nota(nota) ‚Üí agrega una nota v√°lida entre 0 y 10

promedio() ‚Üí devuelve el promedio de las notas

Bonus: impedir que se pueda modificar directamente __notas desde fuera.

5Ô∏è‚É£ Clase Producto
Atributos privados:

__nombre

__precio

__stock

M√©todos p√∫blicos:

set_precio(nuevo_precio) ‚Üí solo valores positivos

vender(cantidad) ‚Üí decrementa el stock si hay suficiente

reponer(cantidad) ‚Üí incrementa el stock

mostrar_info() ‚Üí devuelve nombre, precio y stock de manera segura

1Ô∏è‚É£ Clase Auto con Motor
Crear una clase Motor con m√©todos privados para encender y apagar.

La clase Auto debe tener un atributo privado __motor.

El Auto expone m√©todos p√∫blicos arrancar() y detener(), que delegan la acci√≥n en su Motor.

Validar que no se pueda encender dos veces seguidas.

2Ô∏è‚É£ Clase Biblioteca con Catalogo
Clase Catalogo mantiene una lista privada de libros.

Clase Biblioteca contiene un objeto Catalogo y ofrece m√©todos:

agregar_libro(libro)

buscar_libro(titulo)

La Biblioteca no expone el Catalogo directamente: todas las operaciones deben pasar por sus propios m√©todos.

3Ô∏è‚É£ Clase CuentaBancaria con Historial
Clase Historial guarda una lista privada de transacciones.

Clase CuentaBancaria tiene un atributo privado __historial y m√©todos:

depositar(monto) ‚Üí agrega movimiento al historial

retirar(monto) ‚Üí idem, pero solo si hay saldo suficiente

ver_historial() ‚Üí devuelve una copia del historial (no el original).

4Ô∏è‚É£ Clase CarritoCompras con Producto
Clase Producto con atributos privados __nombre y __precio.

Clase CarritoCompras contiene una colecci√≥n privada de Producto.

M√©todos p√∫blicos en CarritoCompras:

agregar_producto(nombre, precio)

total() ‚Üí suma precios delegando en cada producto

mostrar_productos() ‚Üí lista nombres y precios.

5Ô∏è‚É£ Clase Alumno con Notas
Clase Notas almacena y valida calificaciones (0‚Äì10).

Clase Alumno tiene un atributo privado __notas.

M√©todos p√∫blicos en Alumno:

agregar_nota(valor) ‚Üí delega validaci√≥n a Notas

promedio() ‚Üí calcula a partir de las notas

mostrar_notas() ‚Üí devuelve la lista (copia) de notas.

üìò Consigna

Se desea modelar un sistema b√°sico de pedidos en un restaurante.

Crear un enum llamado CategoriaPlato con las siguientes categor√≠as: ENTRADA, PRINCIPAL, POSTRE, BEBIDA.

Definir una clase Plato que tenga los siguientes atributos privados:

__nombre (str)

__precio (float)

__categoria (CategoriaPlato)
Incluye m√©todos getters y setters controlados (ejemplo: validar que el precio sea positivo).

Definir una clase Pedido que use composici√≥n para mantener una lista de platos (Plato).

M√©todo agregar_plato(plato: Plato) para a√±adir un plato al pedido.

M√©todo calcular_total() que devuelva la suma de los precios.

M√©todo resumen() que muestre todos los platos del pedido con su categor√≠a y precio.

Probar el sistema creando algunos platos y armando un pedido con varios de ellos.
